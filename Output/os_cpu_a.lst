


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                              uC/OS-II
    3 00000000         ;                                        The Real-Time K
                       ernel
    4 00000000         ;
    5 00000000         ;                    Copyright 1992-2021 Silicon Laborat
                       ories Inc. www.silabs.com
    6 00000000         ;
    7 00000000         ;                                 SPDX-License-Identifie
                       r: APACHE-2.0
    8 00000000         ;
    9 00000000         ;               This software is subject to an open sour
                       ce license and is distributed by
   10 00000000         ;                Silicon Laboratories Inc. pursuant to t
                       he terms of the Apache License,
   11 00000000         ;                    Version 2.0 available at www.apache
                       .org/licenses/LICENSE-2.0.
   12 00000000         ;
   13 00000000         ;*******************************************************
                       *************************************************
   14 00000000         
   15 00000000         ;*******************************************************
                       *************************************************
   16 00000000         ;
   17 00000000         ;                                             ARMv7-M Po
                       rt
   18 00000000         ;
   19 00000000         ; Filename  : os_cpu_a.asm
   20 00000000         ; Version   : V2.93.01
   21 00000000         ;*******************************************************
                       *************************************************
   22 00000000         ; For       : ARMv7-M Cortex-M
   23 00000000         ; Mode      : Thumb-2 ISA
   24 00000000         ; Toolchain : ARM C Compiler
   25 00000000         ;*******************************************************
                       *************************************************
   26 00000000         ; Note(s)   : (1) This port supports the ARM Cortex-M3, 
                       Cortex-M4 and Cortex-M7 architectures.
   27 00000000         ;             (2) It has been tested with the following 
                       Hardware Floating Point Unit.
   28 00000000         ;                 (a) Single-precision: FPv4-SP-D16-M an
                       d FPv5-SP-D16-M
   29 00000000         ;                 (b) Double-precision: FPv5-D16-M
   30 00000000         ;*******************************************************
                       *************************************************
   31 00000000         
   32 00000000         ;*******************************************************
                       *************************************************
   33 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   34 00000000         ;*******************************************************
                       *************************************************
   35 00000000         
   36 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   37 00000000                 EXTERN           OSPrioCur
   38 00000000                 EXTERN           OSPrioHighRdy
   39 00000000                 EXTERN           OSTCBCur



ARM Macro Assembler    Page 2 


   40 00000000                 EXTERN           OSTCBHighRdy
   41 00000000                 EXTERN           OSIntExit
   42 00000000                 EXTERN           OSTaskSwHook
   43 00000000                 EXTERN           OS_CPU_ExceptStkBase
   44 00000000                 EXTERN           OS_KA_BASEPRI_Boundary
   45 00000000         
   46 00000000         
   47 00000000                 EXPORT           OSStartHighRdy ; Functions decl
                                                            ared in this file
   48 00000000                 EXPORT           OS_CPU_SR_Save
   49 00000000                 EXPORT           OS_CPU_SR_Restore
   50 00000000                 EXPORT           OSCtxSw
   51 00000000                 EXPORT           OSIntCtxSw
   52 00000000                 EXPORT           OS_CPU_PendSVHandler
   53 00000000         
   54 00000000                 IF               {FPU} != "SoftVFP"
   57                          ENDIF
   58 00000000         
   59 00000000         
   60 00000000         ;*******************************************************
                       *************************************************
   61 00000000         ;                                               EQUATES
   62 00000000         ;*******************************************************
                       *************************************************
   63 00000000         
   64 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   65 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   66 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   67 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   68 00000000         
   69 00000000         
   70 00000000         ;*******************************************************
                       *************************************************
   71 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   72 00000000         ;*******************************************************
                       *************************************************
   73 00000000         
   74 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   75 00000000                 THUMB
   76 00000000                 REQUIRE8
   77 00000000                 PRESERVE8
   78 00000000         
   79 00000000         
   80 00000000         ;*******************************************************



ARM Macro Assembler    Page 3 


                       *************************************************
   81 00000000         ;                                   FLOATING POINT REGIS
                       TERS PUSH
   82 00000000         ;                             void  OS_CPU_FP_Reg_Push (
                       OS_STK  *stkPtr)
   83 00000000         ;
   84 00000000         ; Note(s) : 1) This function saves S16-S31 registers of 
                       the Floating Point Unit.
   85 00000000         ;
   86 00000000         ;           2) Pseudo-code is:
   87 00000000         ;              a) Push remaining FPU regs S16-S31 on pro
                       cess stack;
   88 00000000         ;              b) Update OSTCBCur->OSTCBStkPtr;
   89 00000000         ;*******************************************************
                       *************************************************
   90 00000000         
   91 00000000                 IF               {FPU} != "SoftVFP"
  104                          ENDIF
  105 00000000         
  106 00000000         
  107 00000000         ;*******************************************************
                       *************************************************
  108 00000000         ;                                   FLOATING POINT REGIS
                       TERS POP
  109 00000000         ;                             void  OS_CPU_FP_Reg_Pop (O
                       S_STK  *stkPtr)
  110 00000000         ;
  111 00000000         ; Note(s) : 1) This function restores S16-S31 of the Flo
                       ating Point Unit.
  112 00000000         ;
  113 00000000         ;           2) Pseudo-code is:
  114 00000000         ;              a) Restore regs S16-S31 of new process st
                       ack;
  115 00000000         ;              b) Update OSTCBHighRdy->OSTCBStkPtr point
                       er of new proces stack;
  116 00000000         ;*******************************************************
                       *************************************************
  117 00000000         
  118 00000000                 IF               {FPU} != "SoftVFP"
  127                          ENDIF
  128 00000000         
  129 00000000         
  130 00000000         ;*******************************************************
                       *************************************************
  131 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
  132 00000000         ;
  133 00000000         ; Description : Disable/Enable Kernel aware interrupts b
                       y preserving the state of BASEPRI.  Generally speaking,
  134 00000000         ;               the state of the BASEPRI interrupt excep
                       tion processing is stored in the local variable
  135 00000000         ;               'cpu_sr' & Kernel Aware interrupts are t
                       hen disabled ('cpu_sr' is allocated in all functions
  136 00000000         ;               that need to disable Kernel aware interr
                       upts). The previous BASEPRI interrupt state is restored
  137 00000000         ;               by copying 'cpu_sr' into the BASEPRI reg
                       ister.
  138 00000000         ;
  139 00000000         ; Prototypes  : OS_CPU_SR  OS_CPU_SR_Save   (OS_CPU_SR  



ARM Macro Assembler    Page 4 


                       new_basepri);
  140 00000000         ;               void       OS_CPU_SR_Restore(OS_CPU_SR  
                       cpu_sr);
  141 00000000         ;
  142 00000000         ;
  143 00000000         ; Note(s)     : 1) These functions are used in general l
                       ike this:
  144 00000000         ;
  145 00000000         ;                  void Task (void *p_arg)
  146 00000000         ;                  {
  147 00000000         ;                  #if OS_CRITICAL_METHOD == 3          
                       /* Allocate storage for CPU status register  */
  148 00000000         ;                      OS_CPU_SR  cpu_sr;
  149 00000000         ;                  #endif
  150 00000000         ;
  151 00000000         ;                          :
  152 00000000         ;                          :
  153 00000000         ;                      OS_ENTER_CRITICAL();             
                       /* cpu_sr = OS_CPU_SR_Save(new_basepri);     */
  154 00000000         ;                          :
  155 00000000         ;                          :
  156 00000000         ;                      OS_EXIT_CRITICAL();              
                       /* OS_CPU_RestoreSR(cpu_sr);                 */
  157 00000000         ;                          :
  158 00000000         ;                          :
  159 00000000         ;                  }
  160 00000000         ;
  161 00000000         ;               2) Increasing priority using a write to 
                       BASEPRI does not take effect immediately.
  162 00000000         ;                  (a) IMPLICATION  This erratum means t
                       hat the instruction after an MSR to boost BASEPRI
  163 00000000         ;                      might incorrectly be preempted by
                        an insufficient high priority exception.
  164 00000000         ;
  165 00000000         ;                  (b) WORKAROUND  The MSR to boost BASE
                       PRI can be replaced by the following code sequence:
  166 00000000         ;
  167 00000000         ;                      CPSID i
  168 00000000         ;                      MSR to BASEPRI
  169 00000000         ;                      DSB
  170 00000000         ;                      ISB
  171 00000000         ;                      CPSIE i
  172 00000000         ;*******************************************************
                       *************************************************
  173 00000000         
  174 00000000         OS_CPU_SR_Save
  175 00000000 B672            CPSID            I           ; Cortex-M7 errata 
                                                            notice. See Note #2
                                                            
  176 00000002 B402            PUSH             {R1}
  177 00000004 F3EF 8111       MRS              R1, BASEPRI
  178 00000008 F380 8811       MSR              BASEPRI, R0
  179 0000000C F3BF 8F4F       DSB
  180 00000010 F3BF 8F6F       ISB
  181 00000014 4608            MOV              R0, R1
  182 00000016 BC02            POP              {R1}
  183 00000018 B662            CPSIE            I
  184 0000001A 4770            BX               LR
  185 0000001C         



ARM Macro Assembler    Page 5 


  186 0000001C         OS_CPU_SR_Restore
  187 0000001C B672            CPSID            I           ; Cortex-M7 errata 
                                                            notice. See Note #2
                                                            
  188 0000001E F380 8811       MSR              BASEPRI, R0
  189 00000022 F3BF 8F4F       DSB
  190 00000026 F3BF 8F6F       ISB
  191 0000002A B662            CPSIE            I
  192 0000002C 4770            BX               LR
  193 0000002E         
  194 0000002E         
  195 0000002E         ;*******************************************************
                       *************************************************
  196 0000002E         ;                                         START MULTITAS
                       KING
  197 0000002E         ;                                      void OSStartHighR
                       dy(void)
  198 0000002E         ;
  199 0000002E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  200 0000002E         ;              the first task to start.
  201 0000002E         ;
  202 0000002E         ;           2) During task execution, PSP is used as the
                        stack pointer.
  203 0000002E         ;              When an exception occurs, the core will s
                       witch to MSP until the exception return.
  204 0000002E         ;
  205 0000002E         ;           3) OSStartHighRdy() MUST:
  206 0000002E         ;              a) Setup PendSV exception priority to low
                       est;
  207 0000002E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  208 0000002E         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
  209 0000002E         ;              d) Set OSRunning to TRUE;
  210 0000002E         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  211 0000002E         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  212 0000002E         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  213 0000002E         ;              h) Restore R0-R11 and R14 from new proces
                       s stack;
  214 0000002E         ;              i) Enable interrupts (tasks will run with
                        interrupts enabled).
  215 0000002E         ;*******************************************************
                       *************************************************
  216 0000002E         
  217 0000002E         OSStartHighRdy
  218 0000002E B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  219 00000030 4830            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  220 00000032 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  221 00000036 7001            STRB             R1, [R0]
  222 00000038         
  223 00000038 2000            MOVS             R0, #0      ; Set the PSP to 0 



ARM Macro Assembler    Page 6 


                                                            for initial context
                                                             switch call
  224 0000003A F380 8809       MSR              PSP, R0
  225 0000003E         
  226 0000003E 482E            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
  227 00000040 6801            LDR              R1, [R0]
  228 00000042 F381 8808       MSR              MSP, R1
  229 00000046         
  230 00000046 F7FF FFFE       BL               OSTaskSwHook ; Call OSTaskSwHoo
                                                            k() for FPU Push & 
                                                            Pop
  231 0000004A         
  232 0000004A 482C            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  233 0000004C 2101            MOVS             R1, #1
  234 0000004E 7001            STRB             R1, [R0]
  235 00000050         
  236 00000050 482B            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  237 00000052 492C            LDR              R1, =OSPrioHighRdy
  238 00000054 780A            LDRB             R2, [R1]
  239 00000056 7002            STRB             R2, [R0]
  240 00000058         
  241 00000058 482B            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  242 0000005A 492C            LDR              R1, =OSTCBHighRdy
  243 0000005C 680A            LDR              R2, [R1]
  244 0000005E 6002            STR              R2, [R0]
  245 00000060         
  246 00000060 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  247 00000062 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  248 00000066         
  249 00000066 F3EF 8014       MRS              R0, CONTROL
  250 0000006A F040 0002       ORR              R0, R0, #2
  251 0000006E F380 8814       MSR              CONTROL, R0
  252 00000072 F3BF 8F6F       ISB                          ; Sync instruction 
                                                            stream
  253 00000076         
  254 00000076 E8BD 4FF0       LDMFD            SP!, {R4-R11, LR} ; Restore r4-
                                                            11, lr from new pro
                                                            cess stack
  255 0000007A BC0F            LDMFD            SP!, {R0-R3} ; Restore r0, r3
  256 0000007C E8BD 5000       LDMFD            SP!, {R12, LR} 
                                                            ; Load R12 and LR
  257 00000080 BC06            LDMFD            SP!, {R1, R2} ; Load PC and dis
                                                            card xPSR
  258 00000082 B662            CPSIE            I
  259 00000084 4708            BX               R1
  260 00000086         
  261 00000086         
  262 00000086         ;*******************************************************
                       *************************************************
  263 00000086         ;                       PERFORM A CONTEXT SWITCH (From t



ARM Macro Assembler    Page 7 


                       ask level) - OSCtxSw()
  264 00000086         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  265 00000086         ;
  266 00000086         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  267 00000086         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  268 00000086         ;
  269 00000086         ;           2) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  270 00000086         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  271 00000086         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  272 00000086         ;*******************************************************
                       *************************************************
  273 00000086         
  274 00000086         OSCtxSw
  275 00000086         OSIntCtxSw
  276 00000086 4822            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  277 00000088 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  278 0000008C 6001            STR              R1, [R0]
  279 0000008E 4770            BX               LR
  280 00000090         
  281 00000090         
  282 00000090         ;*******************************************************
                       *************************************************
  283 00000090         ;                                       HANDLE PendSV EX
                       CEPTION
  284 00000090         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  285 00000090         ;
  286 00000090         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  287 00000090         ;              context switches with Cortex-M.  This is 
                       because the Cortex-M auto-saves half of the
  288 00000090         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  289 00000090         ;              saving of R4-R11 & R14 is required and fi
                       xing up the stack pointers. Using the PendSV exception
  290 00000090         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  291 00000090         ;              a thread or occurs due to an interrupt or
                        exception.
  292 00000090         ;
  293 00000090         ;           2) Pseudo-code is:
  294 00000090         ;              a) Get the process SP
  295 00000090         ;              b) Save remaining regs r4-r11 & r14 on pr
                       ocess stack;
  296 00000090         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  297 00000090         ;              d) Call OSTaskSwHook();
  298 00000090         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  299 00000090         ;              f) Get current ready thread TCB, OSTCBCur



ARM Macro Assembler    Page 8 


                        = OSTCBHighRdy;
  300 00000090         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  301 00000090         ;              h) Restore R4-R11 and R14 from new proces
                       s stack;
  302 00000090         ;              i) Perform exception return which will re
                       store remaining context.
  303 00000090         ;
  304 00000090         ;           3) On entry into PendSV handler:
  305 00000090         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  306 00000090         ;                 xPSR, PC, LR, R12, R0-R3
  307 00000090         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  308 00000090         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  309 00000090         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  310 00000090         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  311 00000090         ;
  312 00000090         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  313 00000090         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  314 00000090         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  315 00000090         ;
  316 00000090         ;           5) Increasing priority using a write to BASE
                       PRI does not take effect immediately.
  317 00000090         ;              (a) IMPLICATION  This erratum means that 
                       the instruction after an MSR to boost BASEPRI
  318 00000090         ;                  might incorrectly be preempted by an 
                       insufficient high priority exception.
  319 00000090         ;
  320 00000090         ;              (b) WORKAROUND  The MSR to boost BASEPRI 
                       can be replaced by the following code sequence:
  321 00000090         ;
  322 00000090         ;                  CPSID i
  323 00000090         ;                  MSR to BASEPRI
  324 00000090         ;                  DSB
  325 00000090         ;                  ISB
  326 00000090         ;                  CPSIE i
  327 00000090         ;*******************************************************
                       *************************************************
  328 00000090         
  329 00000090         OS_CPU_PendSVHandler
  330 00000090 B672            CPSID            I           ; Cortex-M7 errata 
                                                            notice. See Note #5
                                                            
  331 00000092 F240 0200 
              F2C0 0200        MOV32            R2, OS_KA_BASEPRI_Boundary ; Se
                                                            t BASEPRI priority 
                                                            level required for 
                                                            exception preemptio
                                                            n
  332 0000009A 6811            LDR              R1, [R2]
  333 0000009C F381 8811       MSR              BASEPRI, R1
  334 000000A0 F3BF 8F4F       DSB



ARM Macro Assembler    Page 9 


  335 000000A4 F3BF 8F6F       ISB
  336 000000A8 B662            CPSIE            I
  337 000000AA         
  338 000000AA F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  339 000000AE E920 4FF0       STMFD            R0!, {R4-R11, R14} ; Save remai
                                                            ning regs r4-11, R1
                                                            4 on process stack
  340 000000B2         
  341 000000B2 4D15            LDR              R5, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  342 000000B4 6829            LDR              R1, [R5]
  343 000000B6 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  344 000000B8         
  345 000000B8         ; At this point, entire context of process has been save
                       d
  346 000000B8 4674            MOV              R4, LR      ; Save LR exc_retur
                                                            n value
  347 000000BA F7FF FFFE       BL               OSTaskSwHook ; Call OSTaskSwHoo
                                                            k() for FPU Push & 
                                                            Pop
  348 000000BE         
  349 000000BE 4810            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  350 000000C0 4910            LDR              R1, =OSPrioHighRdy
  351 000000C2 780A            LDRB             R2, [R1]
  352 000000C4 7002            STRB             R2, [R0]
  353 000000C6         
  354 000000C6 4911            LDR              R1, =OSTCBHighRdy ; OSTCBCur  =
                                                             OSTCBHighRdy;
  355 000000C8 680A            LDR              R2, [R1]
  356 000000CA 602A            STR              R2, [R5]
  357 000000CC         
  358 000000CC F044 0E04       ORR              LR,  R4, #0x04 ; Ensure excepti
                                                            on return uses proc
                                                            ess stack
  359 000000D0 6810            LDR              R0,  [R2]   ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  360 000000D2 E8B0 4FF0       LDMFD            R0!, {R4-R11, R14} ; Restore r4
                                                            -11, R14 from new p
                                                            rocess stack
  361 000000D6 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  362 000000DA         
  363 000000DA F240 0200 
              F2C0 0200        MOV32            R2, #0      ; Restore BASEPRI p
                                                            riority level to 0
  364 000000E2 B672            CPSID            I
  365 000000E4 F382 8811       MSR              BASEPRI, R2
  366 000000E8 F3BF 8F4F       DSB
  367 000000EC F3BF 8F6F       ISB
  368 000000F0 B662            CPSIE            I
  369 000000F2 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  370 000000F4         



ARM Macro Assembler    Page 10 


  371 000000F4                 ALIGN                        ; Removes warning[A
                                                            1581W]: added <no_p
                                                            adbytes> of padding
                                                             at <address>
  372 000000F4         
  373 000000F4                 END
              E000ED22 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E000ED04 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=..\..\output\os_cpu_a.d -o..\..\output\os_cpu_a.o -ID:\users\huawe
i\appdata\local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.1\Device\Include --predefine="
__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 538" --predefine="STM32F
10X_HD SETA 1" --list=..\..\output\os_cpu_a.lst ..\..\Middlewares\uC-OS2\uC-OS2
\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 74 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 00000086

Symbol: OSCtxSw
   Definitions
      At line 274 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
   Uses
      At line 50 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000086

Symbol: OSIntCtxSw
   Definitions
      At line 275 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
   Uses
      At line 51 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHighRdy 0000002E

Symbol: OSStartHighRdy
   Definitions
      At line 217 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
   Uses
      At line 47 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler 00000090

Symbol: OS_CPU_PendSVHandler
   Definitions
      At line 329 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
   Uses
      At line 52 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
OS_CPU_SR_Restore 0000001C

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 186 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
   Uses
      At line 49 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 174 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
   Uses
      At line 48 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 64 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
   Uses
      At line 276 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
Comment: NVIC_INT_CTRL used once
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 67 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
   Uses
      At line 277 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
Comment: NVIC_PENDSVSET used once
NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 66 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
   Uses
      At line 220 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 65 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
   Uses
      At line 219 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 41 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 37 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
   Uses
      At line 236 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
      At line 349 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm

OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 38 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
   Uses
      At line 237 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
      At line 350 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm

OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 36 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
   Uses
      At line 232 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 39 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
   Uses
      At line 241 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
      At line 341 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

      At line 40 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
   Uses
      At line 242 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
      At line 354 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm

OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 42 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
   Uses
      At line 230 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
      At line 347 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm

OS_CPU_ExceptStkBase 00000000

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 43 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
   Uses
      At line 226 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
OS_KA_BASEPRI_Boundary 00000000

Symbol: OS_KA_BASEPRI_Boundary
   Definitions
      At line 44 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\ARM
v7-M\ARM\os_cpu_a.asm
   Uses
      At line 331 in file ..\..\Middlewares\uC-OS2\uC-OS2\Ports\ARM-Cortex-M\AR
Mv7-M\ARM\os_cpu_a.asm
Comment: OS_KA_BASEPRI_Boundary used once
9 symbols
355 symbols in table
